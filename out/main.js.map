{
  "version": 3,
  "sources": ["../src/extension.ts", "../src/commands.ts", "../src/globals/christmas.ts"],
  "sourcesContent": ["import * as vscode from 'vscode';\r\nimport { daysLeft } from './commands';\r\n\r\nlet statusBarText: any = {\r\n  'large': \"$(hat-santa) Christmas\",\r\n  'short': \"$(hat-santa)\"\r\n};\r\n\r\nlet statusBarLeft: vscode.StatusBarItem;\r\nlet statusBarRight: vscode.StatusBarItem;\r\nlet daysLeftCommand: any;\r\n\r\nexport function activate(context: vscode.ExtensionContext) {\r\n\r\n\t// Days left Command\r\n  daysLeftCommand = daysLeft();\r\n\r\n\tcontext.subscriptions.push(daysLeftCommand['command']);\r\n\r\n  statusBarRight = statusBarItem(daysLeftCommand['id']);\r\n  statusBarLeft = statusBarItem(daysLeftCommand['id'], vscode.StatusBarAlignment.Left);\r\n\r\n\tcontext.subscriptions.push(statusBarRight);\r\n\tcontext.subscriptions.push(statusBarLeft);\r\n\r\n  vscode.workspace.onDidChangeConfiguration((event) => {\r\n    statusBarSetting();\r\n  });\r\n\r\n  statusBarSetting();\r\n}\r\n\r\nfunction statusBarSetting(): void {\r\n  let location: string = vscode.workspace.getConfiguration(\"VSChristmas\").StatusBarItemLocation;\r\n  let text: boolean = vscode.workspace.getConfiguration(\"VSChristmas\").toggleLargeStatusBarText;\r\n\r\n  if(text) {\r\n    statusBarRight.text = statusBarText['large'];\r\n    statusBarLeft.text = statusBarText['large'];\r\n  }else{\r\n    statusBarRight.text = statusBarText['short'];\r\n    statusBarLeft.text = statusBarText['short'];\r\n  }\r\n\r\n  if(location !== \"None\") {\r\n    if(location !== \"Both\") {\r\n      if(location !== 'Right') {\r\n        statusBarRight.hide();\r\n        statusBarLeft.show();\r\n      }else{\r\n        statusBarRight.show();\r\n        statusBarLeft.hide();\r\n      }\r\n    }else{\r\n      statusBarRight.show();\r\n      statusBarLeft.show();\r\n    }\r\n  }else{\r\n    statusBarRight.hide();\r\n    statusBarLeft.hide();\r\n  }\r\n}\r\n\r\nfunction statusBarItem(id: string, alignment: vscode.StatusBarAlignment = vscode.StatusBarAlignment.Right, tooltip: string = \"Shows the days until Christmas.\", text: string = statusBarText['large'], priority: number = 100): vscode.StatusBarItem \r\n{\r\n  let statusBar: vscode.StatusBarItem;\r\n\r\n  statusBar = vscode.window.createStatusBarItem(\r\n    alignment,\r\n    priority\r\n  );\r\n\r\n  statusBar.text = text;\r\n  statusBar.tooltip = tooltip;\r\n\tstatusBar.command = id;\r\n\r\n  return statusBar;\r\n}\r\n\r\n// This method is called when your extension is deactivated\r\nexport function deactivate() {}\r\n", "import * as vscode from 'vscode';\r\nimport * as christmas from './globals/christmas';\r\n\r\nexport function daysLeft(): any {\r\n  let id = \"VSChristmas.daysLeft\";\r\n  let command = vscode.commands.registerCommand(id, function () {\r\n    vscode.window.showInformationMessage(\r\n      christmas.daysLeft() + \" days left until Christmas! \uD83C\uDF85\"\r\n    );\r\n  });\r\n  return {\r\n    \"command\": command,\r\n    \"id\": id\r\n  };\r\n}", "export function daysLeft() {\r\n  // Get the current date\r\n  var today = new Date();\r\n\r\n  // Create a Date object for Christmas of the current year\r\n  var cmas = new Date(today.getFullYear(), 11, 25);\r\n\r\n  // Check if the current date is after December 25th\r\n  if (today.getMonth() === 11 && today.getDate() > 25) {\r\n    // If true, set Christmas for the next year\r\n    cmas.setFullYear(cmas.getFullYear() + 1);\r\n  }\r\n\r\n  // Calculate the difference in days between today and Christmas\r\n  var one_day = 1000 * 60 * 60 * 24;\r\n\r\n  // Log the number of days left until Christmas to the console\r\n  return Math.ceil((cmas.getTime() - today.getTime()) / one_day);\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAA,UAAwB;;;ACAxB,aAAwB;;;ACAjB,SAAS,WAAW;AAEzB,MAAI,QAAQ,oBAAI,KAAK;AAGrB,MAAI,OAAO,IAAI,KAAK,MAAM,YAAY,GAAG,IAAI,EAAE;AAG/C,MAAI,MAAM,SAAS,MAAM,MAAM,MAAM,QAAQ,IAAI,IAAI;AAEnD,SAAK,YAAY,KAAK,YAAY,IAAI,CAAC;AAAA,EACzC;AAGA,MAAI,UAAU,MAAO,KAAK,KAAK;AAG/B,SAAO,KAAK,MAAM,KAAK,QAAQ,IAAI,MAAM,QAAQ,KAAK,OAAO;AAC/D;;;ADfO,SAASC,YAAgB;AAC9B,MAAI,KAAK;AACT,MAAI,UAAiB,gBAAS,gBAAgB,IAAI,WAAY;AAC5D,IAAO,cAAO;AAAA,MACF,SAAS,IAAI;AAAA,IACzB;AAAA,EACF,CAAC;AACD,SAAO;AAAA,IACL,WAAW;AAAA,IACX,MAAM;AAAA,EACR;AACF;;;ADXA,IAAI,gBAAqB;AAAA,EACvB,SAAS;AAAA,EACT,SAAS;AACX;AAEA,IAAI;AACJ,IAAI;AACJ,IAAI;AAEG,SAAS,SAAS,SAAkC;AAGzD,oBAAkBC,UAAS;AAE5B,UAAQ,cAAc,KAAK,gBAAgB,SAAS,CAAC;AAEpD,mBAAiB,cAAc,gBAAgB,IAAI,CAAC;AACpD,kBAAgB,cAAc,gBAAgB,IAAI,GAAU,2BAAmB,IAAI;AAEpF,UAAQ,cAAc,KAAK,cAAc;AACzC,UAAQ,cAAc,KAAK,aAAa;AAEvC,EAAO,kBAAU,yBAAyB,CAAC,UAAU;AACnD,qBAAiB;AAAA,EACnB,CAAC;AAED,mBAAiB;AACnB;AAEA,SAAS,mBAAyB;AAChC,MAAI,WAA0B,kBAAU,iBAAiB,aAAa,EAAE;AACxE,MAAI,OAAuB,kBAAU,iBAAiB,aAAa,EAAE;AAErE,MAAG,MAAM;AACP,mBAAe,OAAO,cAAc,OAAO;AAC3C,kBAAc,OAAO,cAAc,OAAO;AAAA,EAC5C,OAAK;AACH,mBAAe,OAAO,cAAc,OAAO;AAC3C,kBAAc,OAAO,cAAc,OAAO;AAAA,EAC5C;AAEA,MAAG,aAAa,QAAQ;AACtB,QAAG,aAAa,QAAQ;AACtB,UAAG,aAAa,SAAS;AACvB,uBAAe,KAAK;AACpB,sBAAc,KAAK;AAAA,MACrB,OAAK;AACH,uBAAe,KAAK;AACpB,sBAAc,KAAK;AAAA,MACrB;AAAA,IACF,OAAK;AACH,qBAAe,KAAK;AACpB,oBAAc,KAAK;AAAA,IACrB;AAAA,EACF,OAAK;AACH,mBAAe,KAAK;AACpB,kBAAc,KAAK;AAAA,EACrB;AACF;AAEA,SAAS,cAAc,IAAY,YAA8C,2BAAmB,OAAO,UAAkB,mCAAmC,OAAe,cAAc,OAAO,GAAG,WAAmB,KAC1N;AACE,MAAI;AAEJ,cAAmB,eAAO;AAAA,IACxB;AAAA,IACA;AAAA,EACF;AAEA,YAAU,OAAO;AACjB,YAAU,UAAU;AACrB,YAAU,UAAU;AAEnB,SAAO;AACT;AAGO,SAAS,aAAa;AAAC;",
  "names": ["vscode", "daysLeft", "daysLeft"]
}
